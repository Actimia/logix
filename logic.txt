{
  type: 'atom',
  atom: 'q',
  reasoning: 'premise',
  line: 2
}

{
  type: 'and',
  left: {
    type: 'atom',
    atom: 'p'
  }
  right: {
    type: 'atom',
    atom: 'q'
  }
  reasoning: {
    rule: 'and-intro',
    line: [1, 2]
  }
  line: 3
}


{
  type: 'assumption',
  proof: [
    {
      type: 'not',
      expr: {
        type: 'atom',
        atom: 'q'
      }
      reasoning: 'assumption'
      line: 4
    },
    {
      type: 'contradiction'
      reasoning: {
        rule: 'not-elim',
        line: [2, 4]
      }
      line: 5
    }
  ]
}


not-intro(expr) {
  if expr.type === assumption
  if expr.proof.last.type === contradiction
  return {
    type: 'not',
    expr: expr.proof.first,
    reasoning: {
      rule: 'not-intro',
      line: [[expr.proof.first.line,expr.proof.last.line]]
    }
  }
}




and-elim-1(expr) {
  res = expr.left
  res.reasoning = {
    rule: 'and-elim-1',
    line: expr.line
  }
}



1 p    p
2 q    p
3 -p   a
4 __   ne 1, 3



1     p
2     q
3   | -p
4   | __
5     p
6

premise expr
assume expr
falsum expr
